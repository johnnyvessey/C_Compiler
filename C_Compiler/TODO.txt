TODO:


x64 todo:

IMPORTANT:
- bug with assigning pointers within struct (maybe only to other struct memory locations)
- test out returning struct from function


- add modulo?? -> pretty easy
	-> only works on ints
	-> use same code gen as IDIV but just use RDX as result instead of RAX

- make sure function calls work properly; test recursion


- Stress test register allocation for control flow
-> reduce registers
-> make sure loads and stores (b/c of spilling) work properly
-> think about tentative spilling optimization

- Stress test structs and how they work


 - to test out spilling, temporarily reduce the registers in the availableRegisters vector

- figure out how RAX and XMM0 are used for returns -> is it correct? especially if there is control flow


- idea: to reduce dependencies and to improve pipelining, cycle registers:
	-> every time you allocate a register, move that register to the back of the list of potential registers
	-> keep RAX (maybe RDX too), XMM0 in separate list (or just hardcode them)
	-> this will be especially useful in increasing performance of struct copying
	-> does this only need to be done for float registers???



- Greedy algorithm for assigning registers
- keep track of register mapping at each label


Taking intersection of register mappings:
- skip adding mapping to label if instruction right before label was unconditional jump to other label,
	otherwise set the initialRegisterMapping with the current mapping
- be careful about loops
- think about how to reduce spilling inside loops (tentative spilling of variables that aren't used in loop???)
- figure out how to get reference to labels to add mappings to them
- figure out how to get references to jumps
	-> maybe just have dictionary and then insert the all the extra instructions at the very end


- Maybe add back enter and exit scope, as well as stack which stores the variables in a given scope, so that stack memory can be reused






Register Allocation:
- Tentatively spill variables that won't be used within loop
-> if there if no spilling in loop, then don't spill those variables
-> however, if there would be spilling, first check if there are tentatively spilled variables, then use the freed registers
-> be careful about nested loops. Maybe use deque for storing tentatively spilled variables
	-> iterate from left to right when finding variable to spill (want to spill in lowest loop level as possible)
	-> pop from right when exiting loop 





- EITHER HAVE SIGN EXTEND STUFF (also have to deal with how to go from 64 bit to 32 bit... maybe just never do it and only create
	temp 64 bit version of variable when the offset is needed???)
- OR... JUST ONLY USE LONG AND DOUBLE SO THAT FULL 8 bytes are used for every register (except in case of converting flags to value)
-> need to change every hard-coded version of 4... must be careful with this!!!

- for int division... should i do this in IR or during register allocation???




IR OPTIMIZATIONS TODO:

- dead code elimination for if statements and loops (when condition is IR_LITERAL)
	-> this could interact with constant propogation, so maybe have this be a separate step
	-> in that case, need to know start and end of bounds for if statements (maybe based on scope start and end)
- removing unused variables
	-> do topological sort on variables??? -> might remove too much
- constant propagation
	-> be careful about control flow (if statements, loops)
	-> play this very safe (only do for variables in top of scope?)
	-> only do this for variables whose reference was never taken



IR TODO:

- Copy to stack function args in reverse order??? -> or just subtract offset from sum of memory for each arg


- IMPORTANT: Add variable reload and write register to memory IR_Statements at the right places
	-> add list of specific variables that need to be written to memory / reloaded ???
	-> always write variables whose address has been taken to memory
	



PARSER TODO:

	Important next steps;

	- Add auto cast from int to float or float to int during inits and assigns
	- Getting memory size of array!

	- Parse struct variable initialization (i.e. struct structVar v = {1, 2}; struct structVar2 v2 = {1, {1,2}, {3,4}};)
		-> figure out what type that rvalue should be? (struct literal??, but what if it references other struct variable) -> (i.e. struct structVar1 v = {1, testVar}; )

	- add ControlFlowBlock class that has statementgroup as member
		- if statements, loops create new ControlFlowBlocks

	- figure out Lexing/Parsing for negative int/float literals [DONE??]

	- unit tests
	- Properly parse string literals and char literals
	- figure out calling external functions (malloc??)
	- add const variables
	


AST:

- Figure out how to recursively traverse the AST in the proper order to generate the assembly / IR code
- when doing assignment and function parameters, make copy of variable / store value in pointer (LLVM)