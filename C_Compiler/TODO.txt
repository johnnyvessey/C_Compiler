TODO:



IR OPTIMIZATIONS TODO:

- dead code elimination for if statements and loops (when condition is IR_LITERAL)
	-> this could interact with constant propogation, so maybe have this be a separate step
	-> in that case, need to know start and end of bounds for if statements (maybe based on scope start and end)
- removing unused variables
- constant propagation
	-> be careful about control flow (if statements, loops)
	-> play this very safe (only do for variables in top of scope?)



IR TODO:

- IMPORTANT: Add variable reload and write register to memory IR_Statements at the right places
	-> add list of specific variables that need to be written to memory / reloaded ???
	-> always write variables whose address has been taken to memory
	



PARSER TODO:

	Important next steps;

	- Add auto cast from int to float or float to int during inits and assigns
	- Getting memory size of array!

	- Parse struct variable initialization (i.e. struct structVar v = {1, 2}; struct structVar2 v2 = {1, {1,2}, {3,4}};)
		-> figure out what type that rvalue should be? (struct literal??, but what if it references other struct variable) -> (i.e. struct structVar1 v = {1, testVar}; )

	- add ControlFlowBlock class that has statementgroup as member
		- if statements, loops create new ControlFlowBlocks

	- figure out Lexing/Parsing for negative int/float literals [DONE??]

	- unit tests
	- Properly parse string literals and char literals
	- figure out calling external functions (malloc??)
	- add const variables
	


AST:

- Figure out how to recursively traverse the AST in the proper order to generate the assembly / IR code
- when doing assignment and function parameters, make copy of variable / store value in pointer (LLVM)